
mods:/spawnp $player = runas($player, /spawn)

*:/whatever = msg(pinfo(player(), 12))

*:/heal = >>>
    _assertperm('restricted', 0)
    set_pfood(20)
    set_phealth(20)
<<<

*:/spawnmob [$] = >>>
    _assertperm('admin', 0)
    assign(@m, reg_match('^([a-z:]+) ?([0-9]*)$', $))
    if(array_index_exists(@m,0),
        try(
            assign(@loc, pcursor())
            array_set(@loc, 1, add(@loc[1], 1))
            spawn_entity(@m[1], integer(if(not(equals(@m[2], '')),@m[2], 1)), @loc),
        @e,
            msg(concat(color('RED'), 'Unknown mob!'))),
    #else:
        msg(concat(color('RED'), 'Spawns a mob on the block you\'re looking at'))
        msg(concat(color('RED'), 'Usage: /spawnmob <mob>[:<data>] [quantity]')))
<<<

*:'/set-mob-effect' [$help] = >>>
	_assertperm('admin')
	msg(color('GOLD').'Usage:')
	msg(color('YELLOW').'	/set-mob-effect <radius> <potionID> <strength> <duration> <ambient>')
	msg(color('GOLD').'Potion ID is from the list at http://minecraft.gamepedia.com/Status_effect#List_of_effects')
	msg(color('GOLD').'Duration is in seconds')
	msg(color('GOLD').'Ambient is true|false and designates if the particle effects should be shown.')
<<<

*:'/set-mob-effect' $radius $potionid $strength $seconds $ambient = >>>
	_assertperm('admin')
	@MAX_RADIUS = 20
	@radius = $radius
	if (! is_numeric(@radius) || @radius > @MAX_RADIUS) {
		die(color('RED').'The first argument must be a number no more than '.@MAX_RADIUS.'.')
	}
	msg(color('GOLD').'Configuring mobs within'$radius'blocks to have ID'$potionid'status effect at strength'$strength'for'$seconds'seconds, ambient (visible effects) is'$ambient'.')
	foreach (entities_in_radius(ploc(), $radius), @mob,
		try(
			set_mob_effect(@mob, $potionid, $strength, $seconds, $ambient,)
		)
	)
<<<

*:'/get-mob-effects' [$] = >>>
	_assertperm('admin')
	@range = 3
	@message = color('GOLD').'Mobs within '.@range.' blocks of that block have effects::'
	@mobs = entities_in_radius(pcursor(), @range)
	foreach (@mobs, @mob,
		try (
			@effect = get_mob_effects(@mob)
			@results = @results.' '.@effect.' ('.to_lower(entity_type(@mob)).')'
		)
	)
	msg(@message.@results)
<<<

*:/supavanish [$mob='chicken'] = >>>
	_assertperm('admin', 0)
	assign(@pcursor, pcursor(player()))
	lightning(array(array_get(@pcursor, 0), 0, array_get(@pcursor, 2)))
	run('/vanish')
	spawn_entity($mob)
<<<

*:/kfc $player [$mob='chicken']  = >>>
    _assertperm('admin', 0)
    assign(@pl, ploc($player))
    run('/clearinventory' $player)
    pkill($player)
    lightning(array(array_get(@pl, 0), subtract(array_get(@pl, 1), 10), array_get(@pl, 2)))
    spawn_entity($mob, 1, @pl)
<<<

*:/hat [$data] = >>>
	if (import('sharedata.source') == 'creative') {
		die(color('RED').'/hat is deprecated. Please use /wear instead.')
	} else {
		_assertperm('admin', 0)
	}

    if(equals(pinv(player(), 103), null), 
        set_pinv(array(103: array(type: if(equals($data, ''), 298, $data)))),
    #else:
        set_pinv(array(103: null)))
<<<

*:/speed = >>>
    if (import('sharedata.source') != 'creative') {
        _assertperm('admin', 0)
    }
    set_peffect(player(), 1, 5)
<<<


*:/drunk_spleef $ = >>>
    _assertperm('admin', 0)
	assign(@players, parse_args($))
	foreach(@players, @p,
		set_peffect(@p, 9, 1, 100)
	)
<<<

*:/fakeadminhunt $player = >>>
	_assertperm('admin', 0);
	broadcast(color('GREEN').'[AdminHunt] An admin hunt has begun! Find (and kill) '.$player.' as quickly as you can!');
<<<

*:/fakeop $player = >>>
	_assertperm('admin', 0)
	@player = player($player)
	if(has_permission(@player, 'nerdch.level.admin')){
		if(!has_permission('nerdch.level.admin')){
			die(color('RED').'lol, can\'t fakeop an admin')
		}
	}
	if(import('fakeop.'.@player)){
		unbind(import('fakeop.'.@player))
		msg(color('GOLD').@player.' is no longer fake op\'d')
	} else {
		tmsg(@player, concat(color('yellow'), 'You are now op!'))
		msg(color('GOLD').@player.' is now fake op\'d')
		@bound = bind('player_command', null, array(player: @player), @event,
			cancel()
			@random = array(
				color('RED').'An error occurred while running that command. Have you tried checking your configuration? (Maybe just try running the command again)',
				'Command run successfully',
				'Done.',
			)
			msg(@random[rand(array_size(@random))])
			@mods = _get_mods()
			foreach(@mods, @mod,
				tmsg(@mod, concat('[', color('RED'), 'Fake Op - ', player(), color('WHITE'), '] ', color('GREEN'), 'Tried running command: ', @event['command']))
    			)
		)
		export('fakeop.'.@player, @bound)
	}
<<<

*:/rainbow = >>>
    _assertperm('admin', 0) #Sorry guys ;)
    @index = array(0) # 1 element long array to save an integer. We need it so it works with the [not a] closure.
    @colors = array('WHITE', 'ORANGE', 'MAGENTA', 'LIGHT_BLUE', 'YELLOW', 'LIME', 'PINK', 'GRAY', 'LIGHT_GRAY', 'CYAN', 'PURPLE', 'BLUE', 'BROWN', 'GREEN', 'RED', 'BLACK')
    @location = ploc()
    @location['y'] = @location['y'] + 1 # Move the sheep up 1 in the y axis
    spawn_entity('SHEEP', array_size(@colors), @location, closure(@id) {
            set_entity_spec(@id, array('color': @colors[@index[0]]))
            @index[0] = @index[0] + 1
        }
    )

<<<


*:/sayas $user [$] = >>>
    _assertperm('admin', 0)
    broadcast(concat('<', $user, '> ', $))
<<<


# List all players who have the invisibility potion effect within the specified
# radius (defaulting to 30 blocks).

*:'/list-invisible' [$radius] = >>>
	_assertperm('restricted')
	@radius = if (is_numeric($radius), integer($radius), 30)
	@players = players_in_radius(ploc(), @radius)
	@invisible = array()
	foreach (@players, @p,
		if (ponline(@p) && _has_peffect(@p, 14)) {
			array_push(@invisible, @p)
		}
	)
	if (array_size(@invisible) == 0) {
		msg(color('GOLD').'There are no invisible players within '.@radius.' blocks of you.')
	} else {
		msg(color('GOLD').'The following invisible players are within '.@radius.
		    ' blocks of you: '.array_implode(@invisible, ' '))
	}
<<<


*:/pcheck $player $perm = >>>
	_assertperm('admin')
	msg(has_permission($player, $perm))
<<<
