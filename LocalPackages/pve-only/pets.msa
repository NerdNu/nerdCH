# Show the name of the player who owns the pet you are looking at.
# (Pedantically: near the block you are looking at.)

*:'/petowner' [$] = >>>
	@range = 3
	@message = color(GOLD).'Pets within '.@range.' blocks of that block are owned by:'
	@pets = entities_in_radius(pcursor(), @range, array(OCELOT,WOLF,HORSE))
	foreach (@pets, @pet,
		if (is_tameable(@pet)) {
			@owner = get_mob_owner(@pet)
			@ownerName = if (is_null(@owner), 'no owner', @owner)
			@results = @results.' '.@ownerName.' ('.to_lower(entity_type(@pet)).')'
		}
	)
	console('petowner: at '.ploc().' '.player().' queried pets at '.pcursor().' result:'.@results, false)
	msg(@message.@results)
<<<


# Spawn a dog, cat or horse tamed to the specified player where you are standing.

*:'/spawn-tame-mob' [$help] = >>>
	_assertperm('restricted')
	msg(color(GOLD).'Usage variants:')
	msg(color(YELLOW).'	/spawn-tame-mob dog|wolf <player>')
	msg(color(YELLOW).'	/spawn-tame-mob cat|ocelot <player> [black_cat|red_cat|siamese_cat]')
	msg(color(YELLOW).'	/spawn-tame-mob donkey|mule <player>')
	msg(color(YELLOW).'	/spawn-tame-mob horse player [<color>] [<pattern>]')
	msg(color(GOLD).'For horses and cats, if extra arguments after the player are omitted, values will be chosen at random.')
	msg(color(GOLD).'Horse colors: black, brown, chestnut, creamy, dark_brown, gray, white')
	msg(color(GOLD).'Horse patterns: none, socks, whitefield, white_dots, black_dots')
<<<

*:'/spawn-tame-mob' $type $player [$color] [$pattern] = >>>
	_assertperm('restricted')
	@mob = to_lower($type)
	@color = to_lower($color)
	@pattern = to_lower($pattern)
	
	if (@mob == 'dog', @mob = 'wolf')
	if (@mob == 'cat', @mob = 'ocelot')
	if (! array_contains(array(wolf,ocelot,horse,donkey,mule), @mob)) {
		die(color(RED).'We can\'t spawn a tame '.@mob.'!')
	}

	# Prevent the mob from spawning *inside* the block at the player's feet. ;_;
	@loc = ploc()
	@loc[1] = @loc[1] + 1

	if (@mob == 'ocelot') {
		@CAT_TYPES = array(black_cat, red_cat, siamese_cat)
		
		# If a valid cat color is specified, use it, otherwise select at random.
		if (! array_contains(@CAT_TYPES, @color)) {
			@color = @CAT_TYPES[rand(array_size(@CAT_TYPES))]
		}
		@mob = @mob.':'.@color
	} else if (@mob == 'horse') {
		@horse = _spawn_horse(@loc, 'horse', @color, @pattern)
		tame_mob($player, @horse)
		die(color(GOLD).'Spawned a horse owned by '.$player.'.')		
	} else if (@mob == 'donkey' || @mob == 'mule') {
		@mob = 'horse:'.@mob
	}

	tame_mob($player, spawn_mob(@mob, 1, @loc)[0])
	msg(color(GOLD).'Spawned '.@mob.' owned by '.$player.'.')
<<<


*:'/send-pet-home' [$] = >>>
	_assertperm('restricted')
	@range = 3
	@pets = entities_in_radius(pcursor(), @range, array(OCELOT,WOLF,HORSE))
	if (array_size(@pets) == 0) {
		die(color(RED).'There are no pets within '.@range.' blocks of that block.')
	} else if (array_size(@pets) == 1) {
		@owner = get_mob_owner(@pets[0])
		@bed = pbed_location(@owner)
		set_ploc(@bed)
		set_entity_loc(@pets[0], @bed)
		set_timeout(3000, closure(set_entity_loc(@pets[0], @bed)))
		die(color(GOLD).'Sending '.@owner.'\'s '.to_lower(entity_type(@pets[0])).' to '.@bed.'.')
	} else {
		msg(color(RED).'There are multiple pets at that location.')
		call_alias('/petowner')
	}
<<<


# /omg-ponies [$count] [$radius]
#
#	Admin command to spawn $count horses or donkeys on dry land on the surface 
#	up to $radius blocks from the player.
#
#	Omitting the arguments just shows usage.
#	$count is capped at 100.

*:'/omg-ponies' = >>>
	_assertperm('admin')
	msg(color(GOLD).'Usage: /omg-ponies <count> <radius>')
	msg(color(GOLD).'Spawn up to <count> horses/donkeys up to <radius> blocks from you.')
<<<

*:'/omg-ponies' $count $radius = >>>
	_assertperm('admin')
	if (! is_integral($count)) {
		die(color(RED).'The count must be an integer.')
	}
	if ($count > 100) {
		die(color(RED).'The count can be no more than 100.')
	}
	if (! is_numeric($radius)) {
		die(color(RED).'The radius must be a number.')
	}
	for (@i = 0, @i < $count, ++@i,
		@range = rand() * $radius
		@angle = rand() * 6.28318530718
		@loc = ploc()
		@loc[0] = @loc[0] + @range * cos(@angle)
		@loc[2] = @loc[2] + @range * sin(@angle)
		@loc = get_highest_block_at(@loc)
		inc(@loc[1])
		_spawn_horse(@loc)
	)
<<<

