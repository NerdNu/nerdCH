
/*
 * Database layout:
 * places - contains all the places. Holds an array of places.
 * A place is an associative array with 'name' and 'coord' fields.
 */

*:/place [$] = >>>
	@places = get_value('places')
	if(@places == null){
		@places = array()
	}
	if($ == ''){
		@names = array()
		@count = 0
		# List all the places
		@temp = array()
		foreach(@places, @place,
			array_push(@temp, @place['name'])
		)
		@places = @temp
		array_sort(@places, STRING_IC)
		if(player() == 'LadyCailin'){
			@places = array_rand(@places, array_size(@places), false)
		}
		foreach(@places, @place,
			@color = GRAY
			if(@count % 2 == 1){
				@color = WHITE
			}
			(@count++)
			array_push(@names, color(@color).@place)
		)
		msg('Places: '.array_implode(@names, ', '))
	} else {
		foreach(@places, @place,
			if(equals_ic(@place['name'], $)){
				@loc = @place['coord']
				@x = @loc[0]
				@z = @loc[2]
				@ploc = array(x: ploc()[0], z: ploc()[2])
				msg(color(LIGHT_PURPLE).@place['name'].color(WHITE).':')
				msg(color(RED).'X: '.color(WHITE).sprintf('%.3f', @x))
				msg(color(GREEN).'Z: '.color(WHITE).sprintf('%.3f', @z))
				msg(color(BLUE).'Distance: '.color(WHITE).sprintf('%.3f', sqrt(pow(@z - @ploc['z'], 2) + pow(@x - @ploc['x'], 2))))
				@yaw = to_degrees(atan2((@ploc['z'] - @z), (@ploc['x'] - @x)))
				@yaw += 90
				pfacing(@yaw, pfacing()[1])
				break()
			}
		)
	}
<<<

*:'/nearest-place' [$] = >>>
	@places = get_value('places')
	if(@places == null){
		@places = array()
	}
	proc(_distance, @loc1, @loc2,
		return(sqrt(((@loc1[0] - @loc2[0]) ** 2) + ((@loc1[2] - @loc2[2]) ** 2)))
	)
	@closest = 10000
	@closestPlace = null
	if ($ == ''){
		foreach(@places, @place,
			@dist = _distance(ploc(), @place['coord'])
			if(@dist < @closest){
				@closestPlace = @place
				@closest = @dist
			}
		
		)
		if(@closestPlace != null){
			call_alias('/place '.@closestPlace['name'])
		} else {
			msg(color(LIGHT_PURPLE).'Hmm, doesn\'t look like there are any places yet')
		}
		die();
	}

	@args = parse_args($)
	if (array_size(@args) == 3){
		if (or(!is_numeric(@args[0]),!is_numeric(@args[1]),!is_numeric(@args[2]))){
			die(color(LIGHT_PURPLE).'Usage: /nearest-place [<x> <y> <z>] (coordinates are optional')
		}
		foreach(@places, @place,
			@dist = _distance(@args, @place['coord'])
			if (@dist < @closest){
				@closestPlace = @place
				@closest = @dist
			}
		)
		if(@closestPlace != null){
			call_alias('/place '.@closestPlace['name'])
		} else {
			msg(color(LIGHT_PURPLE).'Hmm, doesn\'t look like there are any places yet')
		}
		die()
	}

	msg(color(LIGHT_PURPLE).'Usage: /nearest-place [<x> <y> <z>](coordinates are optional) ')
<<<

/warpplace [$] = >>>
	if($ == ''){
		call_alias('/place')
	} else {
		@places = get_value('places')
		if(@places == null){
			@places = array()
		}
		foreach(@places, @place,
			if(equals_ic(@place['name'], $)){
				set_ploc(@place['coord'])
			}
		)
	}
<<<
/addplace $place = >>>
	@places = get_value('places')
	if(@places == null){
		@places = array()
	}
	array_push(@places, array(name: $place, coord: ploc()))
	store_value('places', @places)
	msg(color(LIGHT_PURPLE).$place . ' added.')
	call_alias('/place '.$place)
<<<

/delplace $place = >>>
	@places = get_value('places')
	if(@places == null){
		@places = array()
	}
	@found = false
	foreach(@places, @key, @value,
		if(equals_ic(@value['name'], $place)){
			array_remove(@places, @key)
			@found = true
			break()
		}
	)
	store_value('places', @places)
	if(@found){
		msg(color(LIGHT_PURPLE).$place . ' removed')
	} else {
		msg(color(LIGHT_PURPLE).$place . ' not found!')
	}
<<<
