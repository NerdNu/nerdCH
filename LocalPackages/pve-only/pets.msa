# Show the name of the player who owns the pet you are looking at.
# (Pedantically: near the block you are looking at.)

/**
 * @command
 */
*:'/petowner' [$] = >>>
	@range = 3
	@message = color('GOLD').'Pets within '.@range.' blocks of that block are owned by:'
	@pets = entities_in_radius(pcursor(), @range, array('CAT','OCELOT','WOLF','LLAMA','DONKEY','MULE','HORSE','SKELETON_HORSE','ZOMBIE_HORSE','PARROT'))
	@results = '';
	foreach (@pets, @pet,
		if (is_tameable(@pet)) {
			@owner = get_mob_owner(@pet)
			@ownerName = if (is_null(@owner), 'no owner', @owner)
			@results = @results.' '.@ownerName.' ('.to_lower(entity_type(@pet)).')'
		}
	)
	console('petowner: at '.ploc().' '.player().' queried pets at '.pcursor().' result:'.@results, false)
	msg(@message.@results)
<<<

*:/pinfo [$] = call_alias('/petowner')

*:/petinfo [$] = call_alias('/petowner')

/**
 * @command
 */
*:/assailant [$] = >>>
	_assertperm('restricted')
	@range = 3
        msg(color('GOLD').'Entities within '.@range.' blocks of that block hurt by:')
        @entities = entities_in_radius(pcursor(), @range)
	foreach (@entities, @entity,

		# Get an appropriate name for the entity
		if(entity_type(@entity)=='PLAYER') {
			@entityName=display_name(@entity)
		} else if(get_mob_name(@entity)) {
			@entityName=get_mob_name(@entity)
		} else {
			@entityName=entity_type(@entity)
		}

		# Look for the damage tag and print if found
		foreach(@tag in get_scoreboard_tags(@entity)) {
			if(string_starts_with(@tag,'BeastMaster.damage-player')){
				msg(@entityName.' last damaged by '.substr(@tag,28))
			}
		}
	)
	console('assailant: at '.ploc().' '.player().' queried assailants at '.pcursor(), false)
<<< 

# Spawn a dog, cat or horse tamed to the specified player where you are standing.

*:'/spawn-tame-mob' [$help] = >>>
	_assertperm('restricted')
	msg(color('GOLD').'Usage variants:')
	msg(color('YELLOW').'	/spawn-tame-mob dog|wolf <player>')
	msg(color('YELLOW').'	/spawn-tame-mob cat|ocelot <player> [black_cat|red_cat|siamese_cat]')
	msg(color('YELLOW').'	/spawn-tame-mob donkey|mule <player>')
	msg(color('YELLOW').'	/spawn-tame-mob horse player [<color>] [<pattern>]')
	msg(color('YELLOW').'	/spawn-tame-mob parrot player [<variant>]')
	msg(color('GOLD').'For horses and cats, if extra arguments after the player are omitted, values will be chosen at random.')
	msg(color('GOLD').'Horse colors: black, brown, chestnut, creamy, dark_brown, gray, white')
	msg(color('GOLD').'Horse patterns: none, socks, whitefield, white_dots, black_dots')
	msg(color('GOLD').'Parrot variants: 0=red, 1=blue, 2=green, 3=cyan, 4=silver')
<<<

*:'/spawn-tame-mob' $type $player [$color] [$pattern] = >>>
	_assertperm('restricted')
	@mob = to_lower($type)
	@color = to_lower($color)
	@pattern = to_lower($pattern)

	if (@mob == 'dog', @mob = 'wolf')
	if (@mob == 'cat', @mob = 'ocelot')
	if (! array_contains(array('wolf','ocelot','horse','donkey','mule','parrot'), @mob)) {
		die(color('RED').'We can\'t spawn a tame '.@mob.'!')
	}

	# Prevent the mob from spawning *inside* the block at the player's feet. ;_;
	@loc = ploc()
	@loc['y'] = @loc['y'] + 1

	if (@mob == 'ocelot') {
		@CAT_TYPES = array('black_cat','red_cat','siamese_cat')

		# If a valid cat color is specified, use it, otherwise select at random.
		if (! array_contains(@CAT_TYPES, @color)) {
			@color = @CAT_TYPES[rand(array_size(@CAT_TYPES))]
		}
		@mob = @mob.':'.@color
	} else if (@mob == 'horse') {
		@horse = _spawn_horse(@loc, @color, @pattern)
		set_mob_owner(@horse, $player)
		die(color('GOLD').'Spawned a horse owned by '.$player.'.')
	} else if (@mob == 'donkey' || @mob == 'mule') {
		@mob = 'horse:'.@mob
	} else if (@mob == 'parrot') {
		@PARROT_TYPES = array(0,1,2,3,4)
		# parrot colors don't actually work yet....
		# If a valid parrot color is specified, use it, otherwise select at random.
		if (! array_contains(@PARROT_TYPES, @color)) {
			@color = @PARROT_TYPES[rand(array_size(@PARROT_TYPES))]
		}
		@mob = @mob.':'.@color
	}

	@id = spawn_entity(@mob, 1, @loc)[0]
	set_entity_persistence(@id, true)
	set_mob_owner(@id, $player)
	msg(color('GOLD').'Spawned '.@mob.' owned by '.$player.'.')
<<<


*:'/spawn-super-horse' [$] = >>>
	_assertperm('admin');
	run('/summon EntityHorse ~0 ~1 ~0 {Attributes:[{Name:generic.maxHealth,Base:35},{Name:generic.movementSpeed,Base:0.4},{Name:horse.jumpStrength,Base:1.05}]}');
<<<


*:'/send-pet-home' [$] = >>>
	_assertperm('restricted')
	@range = 3
	@pets = entities_in_radius(pcursor(), @range, array('OCELOT','WOLF','HORSE','PARROT'))
	if (array_size(@pets) == 0) {
		die(color('RED').'There are no pets within '.@range.' blocks of that block.')
	} else if (array_size(@pets) == 1) {
		@owner = get_mob_owner(@pets[0])
		@bed = pbed_location(@owner)
		if (is_null(@bed)) {
			die(color('RED').'The owner of that '.to_lower(entity_type(@pets[0])).', '.@owner.', has no bed spawn set.')
		} else {
			set_ploc(@bed)
			set_entity_loc(@pets[0], @bed)
			set_timeout(3000, closure(set_entity_loc(@pets[0], @bed)))
			die(color('GOLD').'Sending '.@owner.'\'s '.to_lower(entity_type(@pets[0])).' to '.@bed.'.')
		}
	} else {
		msg(color('RED').'There are multiple pets at that location.')
		call_alias('/petowner')
	}
<<<

*:'/tppet' [$help] [$help1] = >>>
	_assertperm('restricted')
	msg(color('GOLD').'Usage:')
	msg(color('YELLOW').'	/tppet x y z [<world.]')
	msg(color('GOLD').'First pet within 3 blocks of the current cursor location will be selected for teleporting.')
	msg(color('GOLD').'World name if provided must be exact (eg. world, world_nether, world_the_end). If not provided current world is used')
<<<

*:'/tppet' $x $y $z [$world] = >>>
 	_assertperm('restricted')
	@range = 3
	@world=to_lower($world)
	# If a world was not provided, use the world the player is in
	if (! array_contains(get_worlds(), @world)) {
		@world = pworld()
	}
	# Make a location array using the provided coords and world
	@loc = array('x': $x, 'y': $y, 'z': $z, 'world': @world)
	# Get all the pets within @range of the location the player is looking
	@pets = entities_in_radius(pcursor(), @range, array('OCELOT','WOLF','HORSE','PARROT'))
	if (array_size(@pets) == 0) {
		# Error out if there are no pets
		die(color('RED').'There are no pets within '.@range.' blocks of that block.')
	} else if (array_size(@pets) == 1) {
		# Teleport the player and the pet to the location
		set_ploc(@loc)
		set_entity_loc(@pets[0], @loc)
		set_timeout(3000, closure(set_entity_loc(@pets[0], @loc)))
	} else {
		# Error out if there are too many pets
		msg(color('RED').'There are multiple pets at that location.')
		call_alias('/petowner')
	}
<<<

# /omg-ponies [$count] [$radius]
#
#	Admin command to spawn $count horses or donkeys on dry land on the surface
#	up to $radius blocks from the player.
#
#	Omitting the arguments just shows usage.
#	$count is capped at 100.

*:'/omg-ponies' = >>>
	_assertperm('admin')
	msg(color('GOLD').'Usage: /omg-ponies <count> <radius>')
	msg(color('GOLD').'Spawn up to <count> horses/donkeys up to <radius> blocks from you.')
<<<

*:'/omg-ponies' $count $radius = >>>
	_assertperm('admin')
	if (! is_integral($count)) {
		die(color('RED').'The count must be an integer.')
	}
	if ($count > 100) {
		die(color('RED').'The count can be no more than 100.')
	}
	if (! is_numeric($radius)) {
		die(color('RED').'The radius must be a number.')
	}
	for (@i = 0, @i < $count, ++@i,
		@range = rand() * $radius
		@angle = rand() * 6.28318530718
		@loc = ploc()
		@loc[0] = @loc[0] + @range * cos(@angle)
		@loc[2] = @loc[2] + @range * sin(@angle)
		@loc = get_highest_block_at(@loc)
		inc(@loc[1])
		_spawn_horse(@loc)
	)
<<<


# /find-pets $radius [$types='cat,dog,horse'] [$owner=''] [$name='']
#	Find pets within the specified radius, of the specified types (comma-separated) owned
#	by the specified owner (default: anyone), with the specified name (default: any name).

*:'/find-pets' = >>>
	_assertperm('admin')
	msg(color('GOLD').'Usage: /find-pets <radius> [<types>=dog,cat,horse] [<owner>=\'\'] [<name>=\'\']')
	msg(color('GOLD').'	Find pets owned by the specified owner, with the specified name, within the specified radius.')
	msg(color('GOLD').'	Multiple types can be specified by joining them with commas.')
	msg(color('GOLD').'	If omitted, the owner and name are unconstrained.')
	msg(color('GOLD').'Example:')
	msg(color('GOLD').'	/find-pets 50 dog,cat,horse totemo Fluffy')
<<<


/**
 * Finds your pets!
 * @command
 */
*:/pets = >>>
	call_alias('/find-pets 100000 cat,dog,horse '.player());
<<<

*:'/find-pets' $radius [$types='cat,dog,horse'] [$owner=''] [$name=''] = >>>
	//_assertperm('admin')
	@MAX_RADIUS = 100000
	@radius = $radius
	if (! is_numeric(@radius) || @radius > @MAX_RADIUS) {
		die(color('RED').'The first argument must be a number no more than '.@MAX_RADIUS.'.')
	}
	@types = split(',',replace(to_lower($types),'dog','wolf'));
	@owner = $owner
	@name = $name

	x_new_thread('find-pets'.string(rand()), closure() {
	try (
		@mobs = entities_in_radius(ploc(), @radius, @types)
		@MAX_COUNT = 100000
		@limit = array_size(@mobs)
		if (@limit > @MAX_COUNT) {
			@limit = @MAX_COUNT
			msg(color('RED').'There were more than '.@MAX_COUNT.' matches. Only the first '.@MAX_COUNT.' will be shown.')
		}

		@message = ''
		@count = 0
		for (@i = 0, @i < @limit, inc(@i),
			@mob = @mobs[@i]
			if (is_tameable(@mob)) {
				@mobOwner = get_mob_owner(@mob)
				if (is_null(@mobOwner)) {
					@mobOwner = ''
				}
				@mobName = get_mob_name(@mob)
				if (is_null(@mobName)) {
					@mobName = ''
				}
			} else {
				@mobOwner = ''
				@mobName = ''
			}

			@mobName  = if (is_tameable(@mob), get_mob_name(@mob), '')
			if ((@owner == '' || equals_ic(@mobOwner, @owner)) && (@name  == '' || equals_ic(@mobName, @name))) {
				inc(@count)
			    @formattedNum = color('YELLOW') . '('.@count.') '
			    @formattedOwner = color('WHITE') . if (@mobOwner != '', @mobOwner . '\'s ', '')
			    @formattedType = color('YELLOW') . to_lower(entity_type(@mob)) . ' '
			    @formattedName = color('GRAY') . '"' . @mobName . '" '
				@loc = entity_loc(@mob)
				@formattedCoords = color('GOLD') . '(' . round(@loc[0]) . ',' . round(@loc[1]) . ',' . round(@loc[2]) . ') '
				@message = @message . @formattedNum . @formattedOwner . @formattedType . @formattedName . @formattedCoords
			}
		)

		x_run_on_main_thread_later(closure() {
			if (@count == 0) {
				msg(color('GOLD').'There were no matching mobs.')
			} else {
				msg(color('GOLD').'Matching mobs ['.@count.']: '.@message)
			}
		});
	#catch:
	, @ex,
		x_run_on_main_thread_later(closure() {
			msg(color('RED').'Something went wrong. Is the entity type name correct?')
			die(color('RED').'')
		});
	)
	});
<<<

# Configure all mobs in a range of 5 blocks to be able to pick up items.

*:'/can-pickup' = >>>
	_assertperm('admin')
	msg(color('GOLD').'Configuring mobs within 5 blocks to pick up items.')
	foreach (entities_in_radius(ploc(), 5), @mob,
		try(
			set_can_pickup_items(@mob, true)
		)
	)
<<<
