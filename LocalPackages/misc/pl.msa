*:/plugins [$] = call_alias(/pl)


*:/plincludes [$command] [$] = >>>
	_assertperm('admin')

	@includes = get_value('pl.includes')
	if (is_null(@includes)) {
		@includes = array()
	}

	switch ($command) {
		'list',
			msg(color(GOLD).'Plugins that are always included: '.color(YELLOW).array_implode(@includes, ' '))

		,'add',
			@added = parse_args($)
			if (array_size(@added) != 1) {
				die(color(RED).'Invalid plugin name: '.$)
			}

			@name = @added[0]
			@index = array_index(@includes, @name)
			if (is_null(@index)) {
				array_push(@includes, @name)
				store_value('pl.includes', @includes)
				msg(color(GOLD).'Added: '.color(YELLOW).@name)
			} else {
				msg(color(GOLD).'Already included: '.color(YELLOW).@name)
			}

		,'remove',
			@added = parse_args($)
			if (array_size(@added) != 1) {
				die(color(RED).'Invalid plugin name: '.$)
			}

			@index = array_index(@includes, @added[0])
			if (is_null(@index)) {
				die(color(RED).'That plugin is not in the set of included plugins.')
			}

			@item = array_remove(@includes, @index)
			msg(color(GOLD).'Removed: '.color(YELLOW).@item)
			store_value('pl.includes', @includes)

		,#default
			msg(colorize('&6Usage: &e/pl-includes &f[&elist &f|&e add <name> &f|&e remove <name>&f]'))
			msg(color(GOLD).'Show or modify the list of plugins that are always included in the output of /pl.')
			die()
	}
<<<


*:/plexcludes [$command] [$] = >>>
	_assertperm('admin')

	@excludes = get_value('pl.excludes')
	if (is_null(@excludes)) {
		@excludes = array()
	}

	switch ($command) {
		'list',
			msg(color(GOLD).'Plugins that are always excluded: '.color(YELLOW).array_implode(@excludes, ' '))

		,'add',
			@added = parse_args($)
			if (array_size(@added) != 1) {
				die(color(RED).'Invalid plugin name: '.$)
			}

			@name = @added[0]
			@index = array_index(@excludes, @name)
			if (is_null(@index)) {
				array_push(@excludes, @name)
				store_value('pl.excludes', @excludes)
				msg(color(GOLD).'Added: '.color(YELLOW).@name)
			} else {
				msg(color(GOLD).'Already excluded: '.color(YELLOW).@name)
			}

		,'remove',
			@added = parse_args($)
			if (array_size(@added) != 1) {
				die(color(RED).'Invalid plugin name: '.$)
			}

			@index = array_index(@excludes, @added[0])
			if (is_null(@index)) {
				die(color(RED).'That plugin is not in the set of excluded plugins.')
			}

			@item = array_remove(@excludes, @index)
			msg(color(GOLD).'Removed: '.color(YELLOW).@item)
			store_value('pl.excludes', @excludes)

		,#default
			msg(colorize('&6Usage: &e/pl-excludes &f[&elist &f|&e add <name> &f|&e remove <name>&f]'))
			msg(color(GOLD).'Show or modify the list of plugins that are always excluded from the output of /pl.')
			die()
	}
<<<


*:/pl [$=''] = >>>
	@plugins = get_server_info(9)
	@player = player();

	if ($ == 'shown' || (player() != '~console' && array_contains(pgroup(), 'default'))) {
		console(concat(@player, ' checked the plugin list'))
		foreach(_get_mods(), @mod,
			tmsg(@mod, concat(color('gray'), @player, ' checked the plugin list'))
		)

		@includes = get_value('pl.includes')
		if (is_null(@includes)) {
			@includes = array()
		}
		@excludes = get_value('pl.excludes')
		if (is_null(@excludes)) {
			@excludes = array()
		}

		foreach (@excludes, @item,
			array_remove_values(@plugins, @item)
		)
		@plugins = array_merge(@plugins, @includes)
	}

	array_sort(@plugins, 'STRING_IC')
	msg('Plugins ('.array_size(@plugins).'): '.color('green').array_implode(@plugins, color('white').', '.color('green')))
<<<


*:/version [$] = >>>
	@player = player()
	if (has_permission('nerdch.level.admin')) {
		run(/version);
	} else {
		foreach (@mod in _get_mods()) {
			tmsg(@mod, color('GRAY') . @player . ' checked the server version');
		}
		console(@player . ' checked the server version');
	}
<<<


*:/about [$]         = call_alias('/version');
*:/ver [$]           = call_alias('/version');
*:/icanhasbukkit [$] = call_alias('/version');
