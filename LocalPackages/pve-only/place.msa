/*
 * Database layout:
 * placedb is a multidimensional associative array
 * placedb['world']['set']['place']= {location}
 * place names must be unique per world
 */

#TODO
# Rewrite the whole thing as a standalone plugin


*:/placeraw [$] = >>>
	@places = get_value('places')
	foreach(@places, @place,
		if(equals_ic(@place['name'], $)){
			msg(@place)
		}
	)
<<<

*:/placedbraw = >>>
	msg(get_value('placedb'))
<<<

*:/place [$] = >>>
	@placedb = get_value('placedb')
	@ploc=ploc()
	if(@placedb == null){
		msg(color('LIGHT_PURPLE').'Hmm, doesn\'t look like there are any places yet.')
		die()
	}
	@matchSet = closure(@world, @name){
		try{
			foreach(@set in array_keys(@placedb[@world])){
				if(equals_ic(@set, @name) || equals_ic(substr(@set,0,length(@set)-1), @name)){
					return(@set)
				}
			}
		} catch(IndexOverflowException @e){
			#Do nothing.
		}
		return(null)
	}
	@matchPlace = closure(@world, @name){
		try{
			foreach(@set in array_keys(@placedb[@world])){
				foreach(@place in array_keys(@placedb[@world][@set])){
					if(equals_ic(@place, @name)){
						return(array(@set, @place))
					}
				}
			}
		} catch(IndexOverflowException @e){
		#	msg('No places exist in your world. Here is a list of all that exist.')
		#	call_alias('/place')
		#	die()
		}
		return(null)
	}
	@distance = closure(@loc1, @loc2){
		return(sqrt(((@loc1[0] - @loc2[0]) ** 2) + ((@loc1[1] - @loc2[1]) ** 2) + ((@loc1[2] - @loc2[2]) ** 2)))
	}
	@findClosestPlace = closure(@loc, @places){
		#This may not be the closest place when you consider the option to go through the nether. Fix that in the java rewrite.
		@closestDistance=100000
		@currentClosest=''
		foreach(@place in array_keys(@places)){
			@thisDistance=execute(@places[@place],@loc, @distance)
			if(@thisDistance < @closestDistance){
				@closestDistance=@thisDistance
				@currentClosest=@place
			}
		}
		return(@currentClosest)
	}
	@printPlace = closure(@placeName, @place){
		if(!(@ploc['world']==@place['world'])){
			@dimdis=color('BLACK')
			switch(@place['world']){
				case 'world':
					@dimdis.=', dim=0]'
					break();
				case 'world_nether':
					@dimdis.=', dim=-1]'
					break();
				case 'world_the_end':
					@dimdis.=', dim=1]'
					break();
				default:
					@dimdis.=']'
					break();
			}
		} else {
			@dimdis=color('BLACK').'] '.color('BLUE').' Distance'.color('WHITE').': '.round(execute(@place, @ploc, @distance), 2)
		}
		msg(color('BLACK').'['.
		color('LIGHT_PURPLE').'Name'.color('WHITE').': '.@placeName.color('WHITE').', '.
		color('RED').'X'.color('WHITE').': '.floor(round(@place['x'])).color('WHITE').', '.
		color('YELLOW').'Y'.color('WHITE').': '.floor(round(@place['y'])).color('WHITE').', '.
		color('GREEN').'Z'.color('WHITE').': '.floor(round(@place['z'])).
		@dimdis)
	}
	@lookAt = closure(@loc){
		@yaw = to_degrees(atan2((@ploc['z'] - @loc['z']), (@ploc['x'] - @loc['x'])))
		if (@ploc['y']==@loc['y']) {
			@pitch = 0
		} else {
			@pitch = to_degrees(asin((@ploc['y'] - @loc['y'])/(execute(@ploc, @loc, @distance))))
		}
		@yaw += 90
		pfacing(@yaw, @pitch)
	}
	@routeTo = closure(@loc){
		switch(@ploc['world']){
			case 'world':
				switch(@loc['world']){
					case 'world':
						try {
							#Get the distance from the destination to its closest nether portal
							@set=execute('Overworld', 'netherportals', @matchSet)
							@closestD=execute(@loc, @placedb['Overworld'][@set], @findClosestPlace)
							@distN=execute(@placedb['Overworld'][@set][@closestD], @loc, @distance)

							#Add the distance from the player to the closest nether portal
							@closestP=execute(@ploc, @placedb['Overworld'][@set], @findClosestPlace)
							@distN+=execute(@ploc, @placedb['Overworld'][@set][@closestP], @distance)

							#Add the distance between portals (cheat using the known overworld places and dividing by 8
							@distN+=(execute(@placedb['Overworld'][@set][@closestP], @placedb['Overworld'][@set][@closestD], @distance)/8)

							#Get the distance in the overworld
							@distO=execute(@ploc, @loc, @distance)

							if(@distN<@distO){
								msg(color('LIGHT_PURPLE').'You could save '.round((@distO-@distN)).' blocks by going through the '.color('WHITE').@closestP.color('LIGHT_PURPLE')' then '.color('WHITE').@closestD.color('LIGHT_PURPLE')' nether portals.')
							}
						} catch(IndexOverflowException @e){
							#nothing
						}
						execute(@loc, @lookAt)
						break();
					case 'world_nether':
						@set=execute('Overworld', 'netherportals', @matchSet)
						@closest=execute(@ploc, @placedb['Overworld'][@set], @findClosestPlace)
						msg(color('LIGHT_PURPLE').'That place is in the Nether. Try going to the '.color('WHITE').@closest.color('LIGHT_PURPLE').' nether portal.')
						execute(@closest, @placedb['Overworld'][@set][@closest], @printPlace)
						execute(@placedb['Overworld'][@set][@closest], @lookAt)
						break();
					case 'world_the_end':
						@set=execute('Overworld', 'endportals', @matchSet)
						@closest=execute(@ploc, @placedb['Overworld'][@set], @findClosestPlace)
						msg(color('LIGHT_PURPLE').'That place is in the End. Try going to the '.color('WHITE').@closest.color('LIGHT_PURPLE').' end portal.')
						execute(@closest, @placedb['Overworld'][@set][@closest], @printPlace)
						execute(@placedb['Overworld'][@set][@closest], @lookAt)
						break();
				}
				break();
			case 'world_nether':
				switch(@loc['world']){
					case 'world':
						#Get the correct name of the netherportals set
						@set=execute('Overworld', 'netherportals', @matchSet)
						#Find the closest one to the place the player is going
						@closest=execute(@loc, @placedb['Overworld'][@set], @findClosestPlace)
						#Tell the player what's going on and point them to the portal
						msg(color('LIGHT_PURPLE').'You need to go through a nether portal to get to that place. Pointing you to the portal closest to your destination!')
						execute(@closest, @placedb['Nether'][@set][@closest], @printPlace)
						execute(@placedb['Nether'][@set][@closest], @lookAt)
						break();
					case 'world_the_end':
						#find the closest nether portal to an end portal
						@closestEndportal
						@closestD
						@dist=100000
						@setE=execute('Overworld', 'endportals', @matchSet)
						@setN=execute('Overworld', 'netherportals', @matchSet)
						foreach(@endportal in array_keys(@placedb['Overworld'][@setE])){
							@currentClosestD=execute(@placedb['Overworld'][@setE][@endportal], @placedb['Overworld'][@setN], @findClosestPlace)
							@thisDistance=execute(@placedb['Overworld'][@setE][@endportal],@placedb['Overworld'][@setN][@currentClosestD], @distance)
							if(@thisDistance<@dist){
								@dist=@thisDistance
								@closestD=@currentClosestD
								@closestEndportal=@endportal
							}
						}

						msg(color('LIGHT_PURPLE').'You need to go through '.color('WHITE').@closestD.color('LIGHT_PURPLE').' nether portal then '.color('WHITE').@closestEndportal.color('LIGHT_PURPLE').' end portal to get to your destination. Here are their coordinates.')
						execute(@closestD, @placedb['Nether'][@setN][@closestD], @printPlace)
						execute(@closestEndportal, @placedb['Overworld'][@setE][@closestEndportal], @printPlace)
						execute(@placedb['Nether'][@setN][@closestD], @lookAt)

						break();
					case 'world_nether':
						#Nothing spectial to do. Just point them to the place.
						execute(@loc, @lookAt)
					default:
						msg(color('LIGHT_PURPLE').'You will need to change worlds to get to that place!')
						break();
				}
				break();
			case 'world_the_end':
					if(@loc['world']=='world_the_end'){
						execute(@loc, @lookAt)
					} else {
						msg(color('LIGHT_PURPLE').'You will need to change worlds to get to that place!')
					}
				break();
			default:
				msg(color('LIGHT_PURPLE').'You will need to change worlds to get to that place!')
		}


#		} else if (ploc['world']
#		if((!pinfo(player(), 14)) && (@ploc['world']==@loc['world'])){
#		    pfacing(@yaw, @pitch)
#		} else {
#			
#		}
	}
	@printPlaces = closure(@world, @set){
		@placenames = array_sort(array_keys(@placedb[@world][@set]), 'STRING_IC')
		for(@i=0, @i<length(@placenames), @i++){
			if(@i % 2 == 0){
				@placenames[@i]=color('GRAY').@placenames[@i]
			} else {
				@placenames[@i]=color('WHITE').@placenames[@i]
			}
		}
		msg(color('YELLOW').@set.' in '.@world.': '.array_implode(@placenames, ', '))
	}
	#Search the given world for a set or place matching the given name.
	@searchWorld = closure(@world, @name){
		if ((@set = execute(@world, @name, @matchSet)) != null) {
			#Found a matching set. List places.
			execute(@world, @set, @printPlaces)
			#Get the closest one.
			@closestPlace=execute(@ploc, @placedb[@world][@set], @findClosestPlace)
			#Print it.
			execute(@closestPlace, @placedb[@world][@set][@closestPlace], @printPlace)
			#Look at it.
			execute(@placedb[@world][@set][@closestPlace],@routeTo)
			return(1)
		} else if ((@matchedPlace = execute(@world, @name, @matchPlace)) != null) {
			#Found a matching place. Print it.
			execute(@matchedPlace[1], @placedb[@world][@matchedPlace[0]][@matchedPlace[1]], @printPlace)
			#Look at it.
			execute(@placedb[@world][@matchedPlace[0]][@matchedPlace[1]],@routeTo)
			return(1)
		} else {
			return(0)
		}
	}
	#parse the arguments passed.
	@args = parse_args($)
	
	
	#Translate to the friendlier world name for known worlds.
	switch(pworld()){
		case 'world':
			@pworld='Overworld'
			break();
		case 'world_nether':
			@pworld='Nether'
			break();
		case 'world_the_end':
			@pworld='End'
			break();
		case 'mapworld':
			@pworld='Mapworld';
			break();
		default:
			@pworld=pworld();
			break();
	}
	if(length(@args) == 0){
		# List all the places
		msg('All places:')
		foreach(@world in array_keys(@placedb)){
			foreach(@set in array_keys(@placedb[@world])){
				execute(@world, @set, @printPlaces)
			}
		}
		# Find closestPlace
		try{
			@places=array()
			foreach(@set in array_keys(@placedb[@pworld])){
				foreach(@place in array_keys(@placedb[@pworld][@set])){
					@places[@place]=@placedb[@pworld][@set][@place]
				}
			}
			@closestPlace = execute(@ploc, @places, @findClosestPlace)
			msg('Closest place')
			execute(@closestPlace,@places[@closestPlace],@printPlace)
		} catch(IndexOverflowException @e){
			#No places in this world, already listed all places. Do nothing.
		}
	} else {
		# We have a set name or place name.
		#Check the world specified first if provided
		if(length(@args) == 2){
			#The player gave us a world. Make sure the capitalization is right and assume the rest is right.
			@pworld=to_upper(substr(@args[1],0,0)).to_lower(substr(@args[1],1))
		}
		#Check the player's current world for a matching set or place
		if (execute(@pworld, @args[0], @searchWorld)){
			#Found
			die()
		}
		#Check the rest of the worlds for matching sets	
		@worlds=array_keys(@placedb)
		array_remove_values(@worlds, @pworld)
		foreach(@world in @worlds){
			if(execute(@world, @args[0], @searchWorld)){
				#Found
				die()
			}
		}
		msg('No places found matching "'.@args[0].'". Here are all the places.')
		call_alias('/place')
	}
<<<

*:'/nearest-place' [$] = >>>
	call_alias('/place')
<<<
nerdch.level.admin:/addplace $place [$set] = >>>
	@setname=$set
	if(@setname==''){
		@setname='Other'
	}
	# Make some of the known world names friendlier 
	switch(pworld()){
		case 'world':
			@world='Overworld'
			break();
		case 'world_nether':
			@world='Nether'
			break();
		case 'world_the_end':
			@world='End'
			break();
		case 'mapworld':
			@world='Mapworld';
			break();
		default:
			@world=pworld();
			break()
	}
	@placedb = get_value('placedb')
	if(@placedb==null){
		@placedb=array()
	}
	@placedb[@world][@setname][$place]=ploc()
	store_value('placedb', @placedb)
	msg(color('LIGHT_PURPLE').$place . ' added.')
#	call_alias('/place '.$place)
<<<

nerdch.level.admin:/delplace $world $set $name = >>>
	@placedb = get_value('placedb')
	if(@placedb == null){
		@places = array()
	}
	if(!(@placedb[$world][$set][$name]==null)){
		array_remove(@placedb[$world][$set], $name)
		msg(color('LIGHT_PURPLE').'Removed '.$name.' in '.$set.' in '.$world)
		if(array_size(@placedb[$world][$set])==0){
			array_remove(@placedb[$world], $set)
			msg(color('LIGHT_PURPLE').'Removed '.$set.' in '.$world)
			if(array_size(@placedb[$world])==0){
				array_remove(@placedb, $world)
				msg(color('LIGHT_PURPLE').'Removed '.$world)
			}
		}
	}
	store_value('placedb', @placedb)
<<<
